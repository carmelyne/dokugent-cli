{
  "llmName": "CLAUDE",
  "content": {
    "Setup Conventions": [
      "Always set Claude’s role, goals, and tools explicitly.",
      "Include key constraints and guardrails in `criteria.md`.",
      "Reference relevant files, examples, and test cases in `plan.md` for maximum clarity."
    ],
    "Tool Usage": [
      "Break complex tasks into discrete tool-based steps.",
      "Use tools declaratively: define what each tool does, what it expects, and what it outputs.",
      "Prefer explicit file references (`input.md`, `draft.md`, etc.) over ambiguous naming."
    ],
    "Prompting Patterns": [
      "Use clear directives in system prompts (e.g., “Your task is to…”).",
      "Include examples of both success and failure cases.",
      "Use frontmatter for structured inputs when necessary."
    ],
    "Review and Validation": [
      "Encourage self-check steps: e.g., “Double-check the summary for omissions.”",
      "Ensure outputs match format expectations from `criteria.md`.",
      "Include dryrun simulations in development to test Claude’s reasoning path."
    ],
    "Feedback Loops": [
      "Design workflows where Claude reviews or revises prior outputs (agent self-reflection).",
      "Allow agents to explain their reasoning steps if output deviates from expectations.",
      "Enable comparison tools to weigh alternative outputs if ambiguity exists."
    ],
    "Common Pitfalls to Avoid": [
      "Avoid relying on implicit instructions or vague prompts.",
      "Don’t overload a single prompt with too many objectives.",
      "Don’t assume Claude “remembers” earlier parts unless explicitly passed in again."
    ],
    "Integration Notes": [
      "Claude performs best when plan, criteria, and conventions are tightly scoped.",
      "Agent behavior improves when grounded in markdown-authored files with clear structure."
    ],
    "Source": "Adapted from: https://www.anthropic.com/engineering/claude-code-best-practices"
  }
}
